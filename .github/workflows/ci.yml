name: CI Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  checks: write
  pull-requests: write

env:
  JAVA_VERSION: '21'
  GRADLE_VERSION: '8.5'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: authplatform_test
          POSTGRES_USER: authplatform
          POSTGRES_PASSWORD: authplatform_test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for SonarQube analysis

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x backend/gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        working-directory: backend
        run: ./gradlew clean build -x test --no-daemon
        env:
          GRADLE_OPTS: -Dorg.gradle.daemon=false

      - name: Run unit and integration tests
        working-directory: backend
        run: ./gradlew test --no-daemon
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: authplatform_test
          DB_USER: authplatform
          DB_PASSWORD: authplatform_test_password
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          GRADLE_OPTS: -Dorg.gradle.daemon=false

      - name: Generate test coverage report
        working-directory: backend
        run: ./gradlew jacocoTestReport --no-daemon
        if: always()

      - name: Check code coverage
        working-directory: backend
        run: ./gradlew jacocoTestCoverageVerification --no-daemon
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: backend/build/reports/tests/test/
          retention-days: 30

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            backend/build/reports/jacoco/test/html/
            backend/build/reports/jacoco/test/jacocoTestReport.xml
          retention-days: 30

      - name: Publish test summary
        if: always()
        run: |
          echo "## Test Results üìä" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -d "backend/build/test-results/test" ]; then
            TOTAL=$(find backend/build/test-results/test -name "*.xml" -exec grep -h "tests=" {} \; | sed 's/.*tests="\([0-9]*\)".*/\1/' | awk '{s+=$1} END {print s}')
            FAILURES=$(find backend/build/test-results/test -name "*.xml" -exec grep -h "failures=" {} \; | sed 's/.*failures="\([0-9]*\)".*/\1/' | awk '{s+=$1} END {print s}')
            SKIPPED=$(find backend/build/test-results/test -name "*.xml" -exec grep -h "skipped=" {} \; | sed 's/.*skipped="\([0-9]*\)".*/\1/' | awk '{s+=$1} END {print s}')
            PASSED=$((TOTAL - FAILURES - SKIPPED))

            echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| ‚úÖ Passed | $PASSED |" >> $GITHUB_STEP_SUMMARY
            echo "| ‚ùå Failed | $FAILURES |" >> $GITHUB_STEP_SUMMARY
            echo "| ‚è≠Ô∏è Skipped | $SKIPPED |" >> $GITHUB_STEP_SUMMARY
            echo "| üìà Total | $TOTAL |" >> $GITHUB_STEP_SUMMARY

            if [ "$FAILURES" -gt 0 ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "‚ùå **Tests failed!** Check the test results artifact for details." >> $GITHUB_STEP_SUMMARY
              exit 1
            else
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "‚úÖ **All tests passed!**" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ö†Ô∏è No test results found" >> $GITHUB_STEP_SUMMARY
          fi

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x backend/gradlew

      - name: Run Checkstyle
        working-directory: backend
        run: ./gradlew checkstyleMain checkstyleTest --no-daemon
        continue-on-error: true

      - name: Upload Checkstyle reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: checkstyle-reports
          path: backend/build/reports/checkstyle/
          retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x backend/gradlew

      - name: OWASP Dependency Check
        working-directory: backend
        run: ./gradlew dependencyCheckAnalyze --no-daemon
        continue-on-error: true
        if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

      - name: Upload dependency check report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-check-report
          path: backend/build/reports/dependency-check-report.html
          retention-days: 30

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, security-scan]
    if: always()

    steps:
      - name: Check build status
        run: |
          echo "Build and Test: ${{ needs.build-and-test.result }}"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"

          if [[ "${{ needs.build-and-test.result }}" != "success" ]]; then
            echo "‚ùå Build and test failed"
            exit 1
          fi

          echo "‚úÖ All required checks passed"
