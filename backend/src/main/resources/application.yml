spring:
  application:
    name: auth-platform

  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:authplatform}
    username: ${DB_USER:authplatform}
    password: ${DB_PASSWORD:authplatform}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000

  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
    show-sql: false

  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration
    validate-on-migrate: true

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000
      lettuce:
        pool:
          max-active: 20
          max-idle: 10
          min-idle: 5

  cache:
    type: caffeine
    caffeine:
      spec: maximumSize=10000,expireAfterWrite=10s

  security:
    filter:
      order: 5

server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: /
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
  error:
    include-message: always
    include-stacktrace: never

management:
  endpoints:
    web:
      exposure:
        include: health,metrics,prometheus,info
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      probes:
        enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}

logging:
  level:
    root: INFO
    io.authplatform: DEBUG
    org.springframework.web: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Springdoc OpenAPI Configuration
springdoc:
  api-docs:
    path: /v3/api-docs
    enabled: true
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    operations-sorter: alpha
    tags-sorter: alpha
    display-request-duration: true
    doc-expansion: none
    default-models-expand-depth: 3
    default-model-expand-depth: 3
    try-it-out-enabled: true
  show-actuator: false
  default-produces-media-type: application/json
  default-consumes-media-type: application/json

# Application-specific configuration
auth-platform:
  security:
    api-keys:
      enabled: true
      header-name: X-API-Key
      # Development keys (DO NOT use in production)
      # In production, use environment variables or secrets management
      keys:
        dev-key-org1-abc123: 00000000-0000-0000-0000-000000000000
        dev-key-org2-def456: 00000000-0000-0000-0000-000000000001
        test-key-xyz789: 00000000-0000-0000-0000-000000000002

  # Keycloak Authentication Configuration (Phase 2: JWT Integration)
  # TODO: Uncomment and configure when implementing JWT authentication in Phase 2
  # keycloak:
  #   enabled: false  # Set to true when Phase 2 is implemented
  #   # Keycloak server URLs
  #   base-url: ${KEYCLOAK_BASE_URL:http://localhost:8180}
  #   realm: ${KEYCLOAK_REALM:authplatform}
  #   # OIDC endpoints (auto-discovered via .well-known/openid-configuration)
  #   issuer-uri: ${KEYCLOAK_ISSUER_URI:http://localhost:8180/realms/authplatform}
  #   jwk-set-uri: ${KEYCLOAK_JWK_SET_URI:http://localhost:8180/realms/authplatform/protocol/openid-connect/certs}
  #   # Admin console URL (for documentation)
  #   admin-console-url: ${KEYCLOAK_ADMIN_CONSOLE_URL:http://localhost:8180/admin}
  #   # JWT validation settings
  #   jwt:
  #     # Public key caching (reduce calls to Keycloak)
  #     public-key-cache-ttl: 3600  # 1 hour in seconds
  #     # Allowed clock skew for token validation
  #     clock-skew-seconds: 30
  #     # Expected audience (aud claim)
  #     expected-audience: auth-platform-backend

  # Rate Limiting Configuration
  rate-limit:
    enabled: true
    capacity: 100          # Maximum burst capacity (tokens in bucket)
    refill-tokens: 100     # Tokens added per refill period
    refill-period: 1m      # Refill period (Duration format: 1m, 1s, 1h, etc.)

# OPA (Open Policy Agent) Configuration
opa:
  enabled: ${OPA_ENABLED:false}
  base-url: ${OPA_BASE_URL:http://localhost:8181}
  policy-path: ${OPA_POLICY_PATH:/v1/data/authz/allow}
  timeout-ms: ${OPA_TIMEOUT_MS:5000}
  connect-timeout-ms: ${OPA_CONNECT_TIMEOUT_MS:2000}
  retry-attempts: ${OPA_RETRY_ATTEMPTS:3}
  cache:
    l1:
      ttl-seconds: 10
      max-entries: 10000
    l2:
      ttl-seconds: 300
      max-entries: 1000000
  rate-limit:
    default:
      capacity: 1000
      refill-rate: 1000
      refill-period-minutes: 1
